/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Patient;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.ExportToExcel.ExcelExport;
import Business.Network.Network;
import Business.Organization.NewOrganization;
import Business.UserAccount.UserAccount;
import Business.VitalSigns.VitalSign;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.text.MessageFormat;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author khushbu
 */
public class MyVitalSignsJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private UserAccount account;
    private EcoSystem system;
    private Enterprise enterprise;
    private NewOrganization organization;
    private Network network;

    /**
     * Creates new form MyVitalSignsJPanel
     */
    public MyVitalSignsJPanel(JPanel userProcessContainer, UserAccount account, Enterprise enterprise, Network network, NewOrganization organization, EcoSystem system) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.system = system;
        this.enterprise = enterprise;
        this.organization = organization;
        this.network = network;
        PopulateTable();
    }

    public void PopulateTable() {
        DefaultTableModel model = (DefaultTableModel) vitalSignjTable.getModel();

        model.setRowCount(0);

        for (VitalSign vitalSign : account.getPatient().getVitalSignHistory().getVitalSignList()) {
            Object row[] = new Object[9];
            row[0] = vitalSign.getBodyTemperature();
            row[1] = vitalSign.getBloodPressure();
            row[2] = vitalSign.getHeartRate();
            row[3] = vitalSign.getRespiratoryRate();
            row[4] = vitalSign.getWeight();
            row[5] = vitalSign.getBloodSugarLevel();
            row[6] = vitalSign.getRbcCount();
            row[7] = vitalSign.getUpdatedDttm();
            UserAccount result = vitalSign.getCheckedby();
            row[8] = result == null ? "Sensor" : result;

            ((DefaultTableModel) vitalSignjTable.getModel()).addRow(row);

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        exportToExceljButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        vitalSignjTable = new javax.swing.JTable();

        exportToExceljButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        exportToExceljButton.setText("Export to Excel");
        exportToExceljButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportToExceljButtonActionPerformed(evt);
            }
        });

        vitalSignjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Body temp", "Blood Pressure", "Heart Rate", "RespiratoryRate", "Weight", "Blood Sugar", "RBC Count", "UpdateDttm", "UpdatedBy"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(vitalSignjTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(exportToExceljButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 627, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addComponent(exportToExceljButton)
                .addContainerGap(189, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void exportToExceljButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportToExceljButtonActionPerformed
        // TODO add your handling code here:
        String[][] data = {};

        String[] headers = {"BodyTemperature", "BloodPressure", "HeartRate", "RespiratoryRate", "Weight", "BloodSugarLevel", "UpdatedDttm", "Checkedby"};

        JFrame frame = new JFrame("Excel");
        DefaultTableModel newmodel = new DefaultTableModel(data, headers);
        final JTable table = new JTable(newmodel);
        JScrollPane scroll = new JScrollPane(table);
        JButton export = new JButton("Export");
        export.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                try {

                    ExcelExport excel = new ExcelExport();
                    excel.exportTable(vitalSignjTable, new File("VitalSignexcel"+account.getPatient().getName()+".xls"));
                } catch (IOException e) {
                    e.getMessage();
                }
            }
        });

        frame.getContentPane().add(scroll);
        frame.getContentPane().add(export);
        frame.pack();
        frame.setVisible(true);

    }//GEN-LAST:event_exportToExceljButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exportToExceljButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable vitalSignjTable;
    // End of variables declaration//GEN-END:variables
}
