/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Patient;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.PharmacyEnterprise;
import Business.Network.Network;
import Business.Organization.NewOrganization;
import Business.Organization.PharmacyOrganization;
import Business.Prescription.Prescription;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.WorkRequest;
import java.sql.Timestamp;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author khushbu
 */
public class MyMedicineJPanel extends javax.swing.JPanel {
    
    private JPanel userProcessContainer;
    private UserAccount account;
    private EcoSystem system;
    private Enterprise enterprise;
    private NewOrganization organization;
    private Network network;

    /**
     * Creates new form MyMedicineJPanel
     */
    public MyMedicineJPanel(JPanel userProcessContainer, UserAccount account, Enterprise enterprise, Network network, NewOrganization organization, EcoSystem system) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.system = system;
        this.enterprise = enterprise;
        this.organization = organization;
        this.network = network;
        populatePrescriptionTable();
        populateDrugOrders();
    }
    
    public void populatePrescriptionTable() {
        
        DefaultTableModel model = (DefaultTableModel) prescriptionjTable.getModel();
        
        model.setRowCount(0);
        
        for (Prescription p : account.getPatient().getPrescriptionDir().getPrescriptionDir()) {
            Object row[] = new Object[5];
            row[0] = p;
            row[1] = p.getDosage();
            row[2] = p.getStartDate();
            row[3] = p.getEndDate();
            row[4] = p.getPrescribedBy();
            
            ((DefaultTableModel) prescriptionjTable.getModel()).addRow(row);
        }
        
    }
    
    public void populateDrugOrders() {
        DefaultTableModel model = (DefaultTableModel) drugOrderjTable.getModel();
        
        model.setRowCount(0);
        
        for (WorkRequest r : account.getWorkQueue().getWorkRequestList()) {
            Object row[] = new Object[8];
            row[0] = r.getPrescription().getDrug().getDrugName();
            row[1] = r.getSender();
            row[2] = r.getReceiver();
            row[3] = r.getStatus();
            row[4] = r.getRequestDate();
            row[5] = r.getDeliveredDate();
            row[6] = r.getQuantity();
            row[7] = r.getStatus();
            ((DefaultTableModel) drugOrderjTable.getModel()).addRow(row);
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        orderButton = new javax.swing.JButton();
        quantitySpinner = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        drugOrderjTable = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        prescriptionjTable = new javax.swing.JTable();

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setText("My Medicine");

        orderButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        orderButton.setText("Order");
        orderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderButtonActionPerformed(evt);
            }
        });

        quantitySpinner.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        quantitySpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel2.setText("Quantity");

        drugOrderjTable.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        drugOrderjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Drug", "Sender", "Receiver", "Status", "RequestDate", "Delivery Date", "Quantity", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(drugOrderjTable);
        if (drugOrderjTable.getColumnModel().getColumnCount() > 0) {
            drugOrderjTable.getColumnModel().getColumn(0).setResizable(false);
            drugOrderjTable.getColumnModel().getColumn(1).setResizable(false);
            drugOrderjTable.getColumnModel().getColumn(2).setResizable(false);
            drugOrderjTable.getColumnModel().getColumn(3).setResizable(false);
            drugOrderjTable.getColumnModel().getColumn(4).setResizable(false);
            drugOrderjTable.getColumnModel().getColumn(5).setResizable(false);
            drugOrderjTable.getColumnModel().getColumn(6).setResizable(false);
            drugOrderjTable.getColumnModel().getColumn(7).setResizable(false);
        }

        prescriptionjTable.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        prescriptionjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Drug", "Dosage", "Start date", "End date", "PrescribedBy"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(prescriptionjTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(287, 287, 287)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(45, 45, 45)
                .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(72, 72, 72)
                .addComponent(orderButton)
                .addGap(42, 42, 42))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 701, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 701, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(1, 1, 1)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(orderButton))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void orderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderButtonActionPerformed
        // TODO add your handling code here:
        int row = prescriptionjTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table!!!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else if ((Integer) quantitySpinner.getValue() <= 0) {
            JOptionPane.showMessageDialog(null, "Available Quantity Should be greater than 0!", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            java.util.Date date = new java.util.Date();
            date = new Timestamp(date.getTime());
            Prescription p = (Prescription) prescriptionjTable.getValueAt(row, 0);
            boolean check = checkPatient(p);
            if (!check) {
                WorkRequest wr = null;
                for (WorkRequest lwr : account.getWorkQueue().getWorkRequestList()) {
                    if (p == lwr.getPrescription()) {
                        if (lwr.getDeliveredDate() == null) {
                            wr = lwr;
                        }
                    }
                }
                wr.setQuantity(wr.getQuantity() + (Integer) quantitySpinner.getValue());
                 populateDrugOrders();
            } else {
                WorkRequest request = new WorkRequest();
                request.setPrescription(p);
                request.setQuantity((Integer) quantitySpinner.getValue());
                request.setSender(account);
                request.setStatus("Sent to the Pharmacy");
                request.setRequestDate(date);
                
                NewOrganization org = null;
                for (Enterprise e : network.getEnterpriseDirectory().getEnterpriseList()) {
                    if (e instanceof PharmacyEnterprise) {
                        for (NewOrganization organization : e.getOrganizationDirectory().getOrganizationList()) {
                            if (organization instanceof PharmacyOrganization) {
                                org = organization;
                                break;
                            }
                        }
                    }
                }
                account.getWorkQueue().getWorkRequestList().add(request);
                org.getWorkQueue().getWorkRequestList().add(request);
                
                populateDrugOrders();
            }
    }//GEN-LAST:event_orderButtonActionPerformed
    }
    
    public boolean checkPatient(Prescription p) {
        boolean add = true;
        for (WorkRequest lwr : account.getWorkQueue().getWorkRequestList()) {
            if (p == lwr.getPrescription()) {
                if (lwr.getDeliveredDate() == null) {
                    return false;                    
                }
            }
        }
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable drugOrderjTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton orderButton;
    private javax.swing.JTable prescriptionjTable;
    private javax.swing.JSpinner quantitySpinner;
    // End of variables declaration//GEN-END:variables
}
