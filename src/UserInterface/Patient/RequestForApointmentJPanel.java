/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Patient;

import Business.Appointments.Appointment;
import Business.Department.Department;
import Business.EcoSystem;
import Business.Email.Email;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.DoctorOrganization;
import Business.Organization.NewOrganization;
import Business.Organization.ReceptionistOrganization;
import Business.Patient.Patient;
import Business.UserAccount.UserAccount;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author khushbu
 */
public class RequestForApointmentJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private UserAccount account;
    private EcoSystem system;
    private Enterprise enterprise;
    private NewOrganization organization;
    private Network network;

    /**
     * Creates new form RequestForApointmentJPanel
     */
    public RequestForApointmentJPanel(JPanel userProcessContainer, UserAccount account, Enterprise enterprise, Network network, NewOrganization organization, EcoSystem system) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.system = system;
        this.enterprise = enterprise;
        this.organization = organization;
        this.network = network;

        populateDepartment();
    }

    public void populateDepartment() {
        departmentjComboBox.removeAllItems();

        for (Department department : enterprise.getDepartmentDirectory().getDepartmentList()) {
            departmentjComboBox.addItem(department);
        }

    }

    public void PopulateCombobox(Department department) {
        doctorListjComboBox.removeAllItems();
        NewOrganization org = null;

        for (NewOrganization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (organization.getName().equals("Doctor Organization")) {
                org = organization;
                for (UserAccount ua : org.getUserAccountDirectory().getUserAccountDir()) {
                    if (ua.getEmployee().getDepartment().getDepartmentName().equals(department.getDepartmentName())) {
                        doctorListjComboBox.addItem(ua);
                    }
                }

            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        doctorListjComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        endTimeJSpinner = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        startTimeJSpinner = new javax.swing.JSpinner();
        bookAppointmentjButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        departmentjComboBox = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel4.setText("End Time");

        doctorListjComboBox.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        doctorListjComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel1.setText("Doctor");

        endTimeJSpinner.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        endTimeJSpinner.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), new java.util.Date(1448948604658L), null, java.util.Calendar.HOUR));

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel6.setText("Start Time");

        startTimeJSpinner.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        startTimeJSpinner.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), new java.util.Date(1448948604658L), null, java.util.Calendar.HOUR));

        bookAppointmentjButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        bookAppointmentjButton.setText("Submit");
        bookAppointmentjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookAppointmentjButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel2.setText("Select a department");

        departmentjComboBox.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        departmentjComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        departmentjComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                departmentjComboBoxActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel3.setText("Request For Appointment");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(155, 155, 155)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel6)
                            .addComponent(jLabel2))
                        .addGap(59, 59, 59)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(departmentjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(endTimeJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(startTimeJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(doctorListjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(250, 250, 250)
                        .addComponent(bookAppointmentjButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(160, 160, 160)))
                .addContainerGap(65, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jLabel3)
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(departmentjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(doctorListjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(startTimeJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(endTimeJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(bookAppointmentjButton)
                .addGap(43, 43, 43))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void bookAppointmentjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookAppointmentjButtonActionPerformed
        // TODO add your handling code here:
        Date date = new Date();
        Date StartDate = (Date) startTimeJSpinner.getValue();
        Date endDate = (Date) endTimeJSpinner.getValue();
        long diff = endDate.getTime() - StartDate.getTime();
        long min = diff / (60 * 1000) % 60;

        if (endDate.getTime() <= StartDate.getTime()) {
            JOptionPane.showMessageDialog(null, "End Time should greater than the Start Time!!", "Information", JOptionPane.INFORMATION_MESSAGE);
        } else if (min > 30) {
            JOptionPane.showMessageDialog(null, "One Appointment cannot be greater than 30 mins!!", "Information", JOptionPane.INFORMATION_MESSAGE);
        } else if (min < 10) {
            JOptionPane.showMessageDialog(null, "One Appointment cannot be less than 10 mins!!", "Information", JOptionPane.INFORMATION_MESSAGE);
        } else if (StartDate.getTime() < date.getTime()) {
            JOptionPane.showMessageDialog(null, "Appointment cannot be of past!!", "Information", JOptionPane.INFORMATION_MESSAGE);
        } else {
            NewOrganization org = null;
            for (NewOrganization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                if (organization instanceof ReceptionistOrganization) {
                    org = organization;
                    break;
                }
            }
            UserAccount ua = (UserAccount) doctorListjComboBox.getSelectedItem();
            boolean check = checkPatient(ua, StartDate);
            if (!check) {
                JOptionPane.showMessageDialog(null, "You already have an appointment booked!!", "Information", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            boolean check2 = checkPatientnew(ua, StartDate, endDate);
            if (!check2) {
                JOptionPane.showMessageDialog(null, "You already have an appointment booked!!", "Information", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            Appointment a = new Appointment();
            a.setAssignedTo(ua);
             ua.getEmployee().setAppointmentcount(ua.getEmployee().getAppointmentcount()+1);
//        a.setBookedBy(account);
            a.setPatient(account.getPatient());
            a.setStartTime(StartDate);
            a.setEndTime(endDate);
            a.setStatus("Sent to the Receptionist");
            org.getAppointmentDirectory().getAppointmentdir().add(a);
            account.getAppointmentdir().getAppointmentdir().add(a);
            JOptionPane.showMessageDialog(null, "Appointment Request sent!!", "Information", JOptionPane.INFORMATION_MESSAGE);
        }
//       

    }//GEN-LAST:event_bookAppointmentjButtonActionPerformed

    private void departmentjComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_departmentjComboBoxActionPerformed
        // TODO add your handling code here:
        Department department = (Department) departmentjComboBox.getSelectedItem();
        if (department != null) {
            PopulateCombobox(department);
        }

    }//GEN-LAST:event_departmentjComboBoxActionPerformed
    public boolean checkPatient(UserAccount assignedto, Date date) {
        boolean add = true;
        for (Appointment a : account.getAppointmentdir().getAppointmentdir()) {
            if (a.getAssignedTo() == assignedto) {
                if (a.getEndTime().after(date)) {
                    return false;
                }
            }
        }
        return true;
    }

    public boolean checkPatientnew(UserAccount assignedto, Date startdate, Date enddate) {
        boolean add = true;
        for (Appointment a : account.getAppointmentdir().getAppointmentdir()) {

            if (a.getEndTime().after(startdate)) {
                return false;
            }

        }
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bookAppointmentjButton;
    private javax.swing.JComboBox departmentjComboBox;
    private javax.swing.JComboBox doctorListjComboBox;
    private javax.swing.JSpinner endTimeJSpinner;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JSpinner startTimeJSpinner;
    // End of variables declaration//GEN-END:variables
}
