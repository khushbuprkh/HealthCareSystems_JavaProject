/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Doctor;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.LaboratoryEnterprise;
import Business.LabTestList.LabTest;
import Business.LabTestWorkRequest.LabTestWorkRequest;
import Business.Network.Network;
import Business.Organization.LabOrganization;
import Business.Organization.NewOrganization;
import Business.Patient.Patient;
import Business.UserAccount.UserAccount;
import static com.db4o.qlin.QLinSupport.p;
import static com.sun.corba.se.spi.presentation.rmi.StubAdapter.request;
import java.awt.CardLayout;
import java.sql.Timestamp;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author khushbu
 */
public class ListofTestsJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private Patient patient;
    private Enterprise enterprise;
    private EcoSystem system;
    private Network network;
    private UserAccount account;

    /**
     * Creates new form ListofTestsJPanel
     */
    public ListofTestsJPanel(JPanel userProcessContainer, Patient patient, UserAccount account, Enterprise enterprise, Network network, EcoSystem system) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.patient = patient;
        this.account = account;
        this.enterprise = enterprise;
        this.system = system;
        this.network = network;
        popData();
        populateLabWorkRequestTable();
    }

    public void populateLabWorkRequestTable() {

        DefaultTableModel model = (DefaultTableModel) LabTestworkRequestjTable.getModel();

        model.setRowCount(0);

        for (LabTestWorkRequest request : account.getLabTestWorkQueue().getWorkRequestList()) {
            if (patient.getId() == request.getPatient().getId()) {
                Object row[] = new Object[9];
                row[0] = request.getLabTest().getName();
                row[1] = request.getSender();
                row[2] = request.getReceiver();
                row[3] = request.getPatient();
                row[4] = request.getStatus();
                row[5] = request.getResult();
                row[6] = request.getResultDesc();
                row[7] = request.getRequestDate();
                row[8] = request.getDeliveredDate();

                ((DefaultTableModel) LabTestworkRequestjTable.getModel()).addRow(row);
            }
        }
    }

    public void popData() {
        Enterprise e = null;
        for (Enterprise ent : network.getEnterpriseDirectory().getEnterpriseList()) {
            if (ent.getEnterpriseType().getValue().equals(Enterprise.EnterpriseType.Laboratory.getValue())) {
                e = ent;
                break;
            }
        }

        DefaultTableModel model = (DefaultTableModel) testjTable.getModel();

        model.setRowCount(0);

        for (LabTest test : e.getLabTestDirectory().getLabTestDir()) {
            Object row[] = new Object[3];
            row[0] = test;
            row[1] = test.getDescription();
            row[2] = test.getPrice();

            ((DefaultTableModel) testjTable.getModel()).addRow(row);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        testjTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        LabTestworkRequestjTable = new javax.swing.JTable();
        addToListjButton = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();

        testjTable.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        testjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Test Name", "Test Desc ", "Test Cost"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(testjTable);

        LabTestworkRequestjTable.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        LabTestworkRequestjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Test Name", "Sender", "Receiver", "Patient", "Status", "Result", "ResultDesc", "Request Sent Date", "Completed Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(LabTestworkRequestjTable);
        if (LabTestworkRequestjTable.getColumnModel().getColumnCount() > 0) {
            LabTestworkRequestjTable.getColumnModel().getColumn(0).setResizable(false);
            LabTestworkRequestjTable.getColumnModel().getColumn(1).setResizable(false);
            LabTestworkRequestjTable.getColumnModel().getColumn(2).setResizable(false);
            LabTestworkRequestjTable.getColumnModel().getColumn(3).setResizable(false);
            LabTestworkRequestjTable.getColumnModel().getColumn(4).setResizable(false);
            LabTestworkRequestjTable.getColumnModel().getColumn(5).setResizable(false);
            LabTestworkRequestjTable.getColumnModel().getColumn(6).setResizable(false);
            LabTestworkRequestjTable.getColumnModel().getColumn(7).setResizable(false);
            LabTestworkRequestjTable.getColumnModel().getColumn(8).setResizable(false);
        }

        addToListjButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        addToListjButton.setText("Add to List");
        addToListjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToListjButtonActionPerformed(evt);
            }
        });

        backJButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 763, Short.MAX_VALUE)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 763, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(backJButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addToListjButton))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addToListjButton)
                    .addComponent(backJButton))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(57, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addToListjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToListjButtonActionPerformed
        // TODO add your handling code here:
        int row = testjTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table!!!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
          LabTest labTest = (LabTest) testjTable.getValueAt(row, 0);
    boolean check=checkPatient(labTest,patient);
            if (!check)
            {
             JOptionPane.showMessageDialog(null, "Already prescribed", "Incomplete Form", JOptionPane.INFORMATION_MESSAGE);
             return;
            }
        java.util.Date date = new java.util.Date();
        date = new Timestamp(date.getTime());
//        LabTest labTest = (LabTest) testjTable.getValueAt(row, 0);
        LabTestWorkRequest request = new LabTestWorkRequest();
        labTest.setTestcount(labTest.getTestcount() + 1);
        request.setLabTest(labTest);
        request.setPatient(patient);
        request.setSender(account);
        request.setStatus("Sent to the Lab");
        request.setRequestDate(date);

        NewOrganization org = null;
        for (Enterprise e : network.getEnterpriseDirectory().getEnterpriseList()) {
            if (e instanceof LaboratoryEnterprise) {
                for (NewOrganization organization : e.getOrganizationDirectory().getOrganizationList()) {
                    if (organization instanceof LabOrganization) {
                        org = organization;
                        break;
                    }
                }
            }
        }
        account.getLabTestWorkQueue().getWorkRequestList().add(request);
        org.getLabTestWorkQueue().getWorkRequestList().add(request);

        populateLabWorkRequestTable();
    }//GEN-LAST:event_addToListjButtonActionPerformed
    public boolean checkPatient(LabTest test, Patient patient) {
        boolean add = true;
        for (LabTestWorkRequest lwr : account.getLabTestWorkQueue().getWorkRequestList()) {
            if (test == lwr.getLabTest()) {
                if (patient == lwr.getPatient()) {
                    if(lwr.getDeliveredDate()==null) {
                        return false;
                    }
                }
            }
        }
        return true;
    }
    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable LabTestworkRequestjTable;
    private javax.swing.JButton addToListjButton;
    private javax.swing.JButton backJButton;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable testjTable;
    // End of variables declaration//GEN-END:variables
}
