/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.PharmacyStore;

import Business.Drugs.Drug;
import Business.EcoSystem;
import Business.Email.Email;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.NewOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.WorkRequest;
import java.sql.Timestamp;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author khushbu
 */
public class CheckAndProcessOrdersJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private UserAccount account;
    private EcoSystem system;
    private Enterprise enterprise;
    private NewOrganization organization;
    private Network network;

    /**
     * Creates new form CheckAndProcessOrdersJPanel
     */
    public CheckAndProcessOrdersJPanel(JPanel userProcessContainer, UserAccount account, Enterprise enterprise, Network network, NewOrganization organization, EcoSystem system) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.system = system;
        this.enterprise = enterprise;
        this.organization = organization;
        this.network = network;
        populateDrugOrders();
    }

    public void populateDrugOrders() {
        DefaultTableModel model = (DefaultTableModel) drugOrderjTable.getModel();

        model.setRowCount(0);

        for (WorkRequest r : organization.getWorkQueue().getWorkRequestList()) {
            Object row[] = new Object[8];
            row[0] = r;
            row[1] = r.getSender();
            row[2] = r.getReceiver();
            row[3] = r.getStatus();
            row[4] = r.getRequestDate();
            row[5] = r.getDeliveredDate();
            row[6] = r.getQuantity();
            row[7] = r.getCost();
            if (!r.getStatus().equals("Delivered")) {
                ((DefaultTableModel) drugOrderjTable.getModel()).addRow(row);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        drugOrderjTable = new javax.swing.JTable();
        checkForAvailabilityjButton = new javax.swing.JButton();
        processOrderjButton = new javax.swing.JButton();

        drugOrderjTable.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        drugOrderjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Drug", "Sender", "Receiver", "Status", "RequestDate", "Delivery Date", "Quantity", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(drugOrderjTable);

        checkForAvailabilityjButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        checkForAvailabilityjButton.setText("Check For Availaility");
        checkForAvailabilityjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkForAvailabilityjButtonActionPerformed(evt);
            }
        });

        processOrderjButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        processOrderjButton.setText("Process Order");
        processOrderjButton.setEnabled(false);
        processOrderjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processOrderjButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 602, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(checkForAvailabilityjButton)
                        .addGap(28, 28, 28)
                        .addComponent(processOrderjButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkForAvailabilityjButton)
                    .addComponent(processOrderjButton))
                .addContainerGap(84, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void checkForAvailabilityjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkForAvailabilityjButtonActionPerformed
        // TODO add your handling code here:

        Date sysdate = new Date();
        int row = drugOrderjTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table!!!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        WorkRequest wr = (WorkRequest) drugOrderjTable.getValueAt(row, 0);
        int quantiy = (Integer) drugOrderjTable.getValueAt(row, 6);
        for (Drug drug : enterprise.getDrugDirectory().getDrugList()) {
            if (drug.getDrugName().equals(wr.getPrescription().getDrug().getDrugName())) {

                if (drug.getAvailableQuantity() >= quantiy && drug.getDrugexpiryDate().after(sysdate)) {

                    JOptionPane.showMessageDialog(null, "Available!", "Information", JOptionPane.INFORMATION_MESSAGE);
                    processOrderjButton.setEnabled(true);
                    return;
                } else {
                    JOptionPane.showMessageDialog(null, "Not Available", "Information", JOptionPane.WARNING_MESSAGE);
                    return;
                }
            }
        }


    }//GEN-LAST:event_checkForAvailabilityjButtonActionPerformed

    private void processOrderjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processOrderjButtonActionPerformed
        // TODO add your handling code here:
        Date sysdate = new Date();
        int row = drugOrderjTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table!!!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            WorkRequest wr = (WorkRequest) drugOrderjTable.getValueAt(row, 0);
            int quantiy = (Integer) drugOrderjTable.getValueAt(row, 6);
            for (Drug drug : enterprise.getDrugDirectory().getDrugList()) {
                if (drug.getDrugName().equals(wr.getPrescription().getDrug().getDrugName())) {
                    if (drug.getAvailableQuantity() >= quantiy && drug.getDrugexpiryDate().after(sysdate)) {
                        int cost = drug.getDrugCost();
                        int bill = quantiy * cost;
                        if (wr.getSender().getPatient().getInsurance().getCovrage() < bill || wr.getSender().getPatient().getInsurance().getExpiryDate().before(sysdate)) {
                            String emailId = "healthcare.aed@gmail.com";
                            String password = "kitty@123";
                            String message = "Kindly renew Your Insurance as your drug bill is " + bill + " and your insurance amount is " + wr.getSender().getPatient().getInsurance().getCovrage() + " and its expirydate is " + wr.getSender().getPatient().getInsurance().getExpiryDate();
                            Email.sendMail(emailId, password, message, wr.getSender().getPatient().getEmailID());
                            JOptionPane.showMessageDialog(null, "Insufficient Coverage", "Information", JOptionPane.WARNING_MESSAGE);
                            break;
                        } else {
                            java.util.Date date = new java.util.Date();
                            date = new Timestamp(date.getTime());
                            int coverage = wr.getSender().getPatient().getInsurance().getCovrage();
                            int amt = coverage - bill;
                            wr.getSender().getPatient().getInsurance().setCovrage(coverage);
                            wr.getSender().getPatient().getInsurance().setCovrage(amt);
                            wr.setDeliveredDate(date);
                            wr.setCost(bill);
                            wr.setReceiver(account);
                            wr.setStatus("Delivered");
                            populateDrugOrders();
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Not Available", "Information", JOptionPane.WARNING_MESSAGE);
                        processOrderjButton.setEnabled(false);
                        return;
                    }
                }
            }
        }

    }//GEN-LAST:event_processOrderjButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton checkForAvailabilityjButton;
    private javax.swing.JTable drugOrderjTable;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton processOrderjButton;
    // End of variables declaration//GEN-END:variables
}
