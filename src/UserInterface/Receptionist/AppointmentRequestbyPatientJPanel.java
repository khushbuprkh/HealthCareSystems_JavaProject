/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Receptionist;

import Business.Appointments.Appointment;
import Business.Department.Department;
import Business.EcoSystem;
import Business.Email.Email;
import Business.Enterprise.Enterprise;
import Business.Organization.DoctorOrganization;
import Business.Organization.NewOrganization;
import Business.Patient.Patient;
import Business.UserAccount.UserAccount;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author khushbu
 */
public class AppointmentRequestbyPatientJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private UserAccount account;
    private EcoSystem system;
    private Enterprise enterprise;
    private Department department;
    private NewOrganization organization;

    /**
     * Creates new form AppointmentRequestbyPatientJPanel
     */
    public AppointmentRequestbyPatientJPanel(JPanel userProcessContainer, UserAccount account, Enterprise enterprise, NewOrganization organization, EcoSystem system) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.system = system;
        this.enterprise = enterprise;
        this.organization = organization;
        populateAppintmentRequest();
    }

    public void populateAppintmentRequest() {

        DefaultTableModel model = (DefaultTableModel) requestedappiontmentsjTable.getModel();
        model.setRowCount(0);
        for (Appointment appointment : organization.getAppointmentDirectory().getAppointmentdir()) {
//            if (appointment.getPatient().getId() == account.getPatient().getId()) {
            Object[] row = new Object[5];
            row[0] = appointment;
            row[1] = appointment.getPatient().getName();
            row[2] = appointment.getStartTime();
            row[3] = appointment.getEndTime();
            row[4] = appointment.getStatus();

            model.addRow(row);

        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        requestedappiontmentsjTable = new javax.swing.JTable();
        assignJButton3 = new javax.swing.JButton();
        processOrderjButton = new javax.swing.JButton();

        requestedappiontmentsjTable.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        requestedappiontmentsjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Appointment", "Patient", "Start time", "End Time", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(requestedappiontmentsjTable);

        assignJButton3.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        assignJButton3.setText("Assign to me");
        assignJButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButton3ActionPerformed(evt);
            }
        });

        processOrderjButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        processOrderjButton.setText("Process Order");
        processOrderjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processOrderjButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(assignJButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(processOrderjButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assignJButton3)
                    .addComponent(processOrderjButton))
                .addContainerGap(91, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void assignJButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButton3ActionPerformed

        int selectedRow = requestedappiontmentsjTable.getSelectedRow();

        if (selectedRow < 0) {
            return;
        }

        Appointment request = (Appointment) requestedappiontmentsjTable.getValueAt(selectedRow, 0);
        if (request.getBookedBy() == null) {
            request.setBookedBy(account);
            request.setStatus("Rec processing");
            populateAppintmentRequest();
        } else {
            JOptionPane.showMessageDialog(null, "Already assigned to " + request.getBookedBy() + "!!", "Successful", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_assignJButton3ActionPerformed

    private void processOrderjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processOrderjButtonActionPerformed
        // TODO add your handling code here:
        NewOrganization org = null;
        for (NewOrganization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (organization instanceof DoctorOrganization) {
                org = organization;
                break;
            }
        }
        int selectedRow = requestedappiontmentsjTable.getSelectedRow();
        if (selectedRow < 0) {
            return;
        } else {
            Appointment a = (Appointment) requestedappiontmentsjTable.getValueAt(selectedRow, 0);
            if (a.getBookedBy() == null || a.getBookedBy().equals(account)) {
                a.setAssignedTo(a.getAssignedTo());
                a.setBookedBy(a.getBookedBy());
                a.setPatient(a.getPatient());
                a.setStartTime(a.getStartTime());
                a.setEndTime(a.getEndTime());
                a.setStatus("Sent to the Doctor");

                a.getAssignedTo().getAppointmentdir().getAppointmentdir().add(a);
                populateAppintmentRequest();
            } else {
                JOptionPane.showMessageDialog(null, "Already assigned to " + a.getBookedBy() + "!!", "Successful", JOptionPane.INFORMATION_MESSAGE);
            }
//      getAppointmentdir().add(a);
//            account.getAppointmentdir().getAppointmentdir().add(a);
//            String emailId = "healthcare.aed@gmail.com";
//            String password = "aed@123456";
//            String message = "Your Appointment with the  Doctor " + a.getAssignedTo().getEmployee().getName() + " has been set from " + a.getStartTime() + " to " + a.getEndTime();
//            Email.sendMail(emailId, password, message, a.getPatient().getEmailID());

        }
    }//GEN-LAST:event_processOrderjButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignJButton3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton processOrderjButton;
    private javax.swing.JTable requestedappiontmentsjTable;
    // End of variables declaration//GEN-END:variables
}
